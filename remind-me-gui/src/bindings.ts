/* eslint-disable */
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

declare global {
    interface Window {
        __TAURI_INVOKE__<T>(cmd: string, args?: Record<string, unknown>): Promise<T>;
    }
}

// Function avoids 'window not defined' in SSR
const invoke = () => window.__TAURI_INVOKE__;

/**
 * Attempts to read a vector of Reminders from the specified path. Returns a result containing a Vector of Reminders.
 */
export function readAllReminders(path: string) {
    return invoke()<Reminder[]>("read_all_reminders", { path })
}

export function getPath() {
    return invoke()<string>("get_path")
}

/**
 * Attempts to modify an existing `Reminder` by name with an `EditReminder`.
 * Returns a result containing the number of changes, i.e. 0 means no edits were made.
 * Currently multiple edits are not implemented nor tested.
 */
export function editReminder(path: string, name: string, newData: EditReminder) {
    return invoke()<number>("edit_reminder", { path,name,newData })
}

/**
 * Attempts to remove a reminder from the toml file at the specified path by name.
 * Returns a Result containing the number of deletions made. i.e. 0 means nothing was deleted.
 * Currently, _multiple deletions **may** work_ but haven't been tested.
 */
export function deleteReminder(path: string, name: string) {
    return invoke()<number>("delete_reminder", { path,name })
}

/**
 * Attempts to add a reminder to the specified path by writing directly to the file.
 */
export function addReminder(path: string, reminder: Reminder) {
    return invoke()<null>("add_reminder", { path,reminder })
}

export function readConfig(path: string) {
    return invoke()<Config>("read_config", { path })
}

export function getConfigPath() {
    return invoke()<string>("get_config_path")
}

export function updateRunBackendWithGui(path: string, newVal: boolean) {
    return invoke()<null>("update_run_backend_with_gui", { path,newVal })
}

export function updateStartMinimized(path: string, newVal: boolean) {
    return invoke()<null>("update_start_minimized", { path,newVal })
}

export type EditReminder = { name: string | null; description: string | null; frequency: number | null; icon: string | null }
/**
 * Struct to represent a reminder.
 */
export type Reminder = { name: string; description: string; frequency: number; icon: string | null }
export type Config = { start_minimized: boolean; run_backend_on_gui_start: boolean }
